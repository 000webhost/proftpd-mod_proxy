
mod_proxy's own NetIO API

Why?  So that mod_proxy can properly open NetIO streams for e.g. proxied
TLS connections, where the frontend (or backend) connections might not have
TLS enabled.  This is not a use case for which the core NetIO API, as currently
implemented, is suited.

To work around this, while the core NetIO API is redesigned, mod_proxy has
its own version.  Will this even work, given how the core NetIO API might
be called transitively, e.g. via pr_data_xfer?

The key difference in the Proxy NetIO AP is that the underlying NetIO object
to use is explicitly specified, rather than being assumed.

  pr_netio_stream_t *proxy_netio_open(pool *, int strm_type, int mode,
    pr_netio_t *netio);

  int proxy_netio_read(pr_netio_stream_t *nstrm, pr_netio_t *netio,
    char *buf, size_t bufsz, int len);

  int proxy_netio_write(pr_netio_stream_t *nstrm, pr_netio_t *netio,
    char *buf, size_t bufsz);

  int proxy_netio_close(pr_netio_stream_t *, pr_netio_t *netio);

  int proxy_netio_poll(pr_netio_stream_t *nstrm, pr_netio_t *netio);

  int proxy_netio_postopen(pr_netio_stream *nstrm, pr_netio_t *netio);

  int proxy_netio_printf(pr_netio_stream_t *nstrm, pr_netio_t *netio,
    const char *fmt, ...);

  void proxy_netio_set_poll_interval(pr_netio_stream_t *nstrm,
    pr_netio_t *netio, unsigned int interval);

mod_proxy currently calls the core NetIO API in these places:

  lib/proxy/conn.c:
    pr_netio_open
    pr_netio_poll
    pr_netio_close
    pr_netio_printf

  lib/proxy/ftp/ctrl.c:
    pr_netio_read
    pr_netio_printf

  lib/proxy/ftp/data.c:
    pr_netio_read
    pr_netio_write

  mod_proxy.c:
    pr_netio_postopen
    pr_netio_set_poll_interval

Initial implementation:

  Proxy NetIO API simply delegates to core NetIO API.
